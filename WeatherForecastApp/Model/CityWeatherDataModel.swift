//
//  CityWeatherDataModel.swift
//  WeatherForecastApp
//
//  Created by Atsuki Jako on 2024-02-06.
//

import Foundation

struct CityWeatherDataModel: Decodable, Identifiable {
    var id = UUID()
    let city: CityModel
    let weather: WeatherModel
    
    enum CodingKeys: CodingKey {
        case id
        case city
        case weather
    }
    
    init(city: CityModel, weather: WeatherModel) {
        self.city = city
        self.weather = weather
    }
    
    init() {
        self.city = CityModel(name: City.vancouver.rawValue, latitude: City.vancouver.latitude, longitude: City.vancouver.longitude, timeZone: City.vancouver.timeZone)
        self.weather = WeatherModel(latitude: City.vancouver.latitude, longitude: City.vancouver.longitude, generationtimeMS: 0.24998188018798828, utcOffsetSeconds: -28800, timezone: City.vancouver.timeZone, timezoneAbbreviation: "PST", elevation: 73, currentUnits: Units(time: "iso8601", interval: "seconds", temperature2M: "째C", weatherCode: "wmo code", precipitationProbability: "%"), current: Current(time: "2024-02-12T22:15", interval: 900, temperature2M: 3.6, weatherCode: 0), hourlyUnits: Units(time: "iso8601", interval: "seconds", temperature2M: "째C", weatherCode: "wmo code", precipitationProbability: "%"), hourly: Hourly(time: ["2024-02-12T00:00","2024-02-12T01:00","2024-02-12T02:00","2024-02-12T03:00","2024-02-12T04:00","2024-02-12T05:00","2024-02-12T06:00","2024-02-12T07:00","2024-02-12T08:00","2024-02-12T09:00","2024-02-12T10:00","2024-02-12T11:00","2024-02-12T12:00","2024-02-12T13:00","2024-02-12T14:00","2024-02-12T15:00","2024-02-12T16:00","2024-02-12T17:00","2024-02-12T18:00","2024-02-12T19:00","2024-02-12T20:00","2024-02-12T21:00","2024-02-12T22:00","2024-02-12T23:00","2024-02-13T00:00","2024-02-13T01:00","2024-02-13T02:00","2024-02-13T03:00","2024-02-13T04:00","2024-02-13T05:00","2024-02-13T06:00","2024-02-13T07:00","2024-02-13T08:00","2024-02-13T09:00","2024-02-13T10:00","2024-02-13T11:00","2024-02-13T12:00","2024-02-13T13:00","2024-02-13T14:00","2024-02-13T15:00","2024-02-13T16:00","2024-02-13T17:00","2024-02-13T18:00","2024-02-13T19:00","2024-02-13T20:00","2024-02-13T21:00","2024-02-13T22:00","2024-02-13T23:00","2024-02-14T00:00","2024-02-14T01:00","2024-02-14T02:00","2024-02-14T03:00","2024-02-14T04:00","2024-02-14T05:00","2024-02-14T06:00","2024-02-14T07:00","2024-02-14T08:00","2024-02-14T09:00","2024-02-14T10:00","2024-02-14T11:00","2024-02-14T12:00","2024-02-14T13:00","2024-02-14T14:00","2024-02-14T15:00","2024-02-14T16:00","2024-02-14T17:00","2024-02-14T18:00","2024-02-14T19:00","2024-02-14T20:00","2024-02-14T21:00","2024-02-14T22:00","2024-02-14T23:00","2024-02-15T00:00","2024-02-15T01:00","2024-02-15T02:00","2024-02-15T03:00","2024-02-15T04:00","2024-02-15T05:00","2024-02-15T06:00","2024-02-15T07:00","2024-02-15T08:00","2024-02-15T09:00","2024-02-15T10:00","2024-02-15T11:00","2024-02-15T12:00","2024-02-15T13:00","2024-02-15T14:00","2024-02-15T15:00","2024-02-15T16:00","2024-02-15T17:00","2024-02-15T18:00","2024-02-15T19:00","2024-02-15T20:00","2024-02-15T21:00","2024-02-15T22:00","2024-02-15T23:00","2024-02-16T00:00","2024-02-16T01:00","2024-02-16T02:00","2024-02-16T03:00","2024-02-16T04:00","2024-02-16T05:00","2024-02-16T06:00","2024-02-16T07:00","2024-02-16T08:00","2024-02-16T09:00","2024-02-16T10:00","2024-02-16T11:00","2024-02-16T12:00","2024-02-16T13:00","2024-02-16T14:00","2024-02-16T15:00","2024-02-16T16:00","2024-02-16T17:00","2024-02-16T18:00","2024-02-16T19:00","2024-02-16T20:00","2024-02-16T21:00","2024-02-16T22:00","2024-02-16T23:00","2024-02-17T00:00","2024-02-17T01:00","2024-02-17T02:00","2024-02-17T03:00","2024-02-17T04:00","2024-02-17T05:00","2024-02-17T06:00","2024-02-17T07:00","2024-02-17T08:00","2024-02-17T09:00","2024-02-17T10:00","2024-02-17T11:00","2024-02-17T12:00","2024-02-17T13:00","2024-02-17T14:00","2024-02-17T15:00","2024-02-17T16:00","2024-02-17T17:00","2024-02-17T18:00","2024-02-17T19:00","2024-02-17T20:00","2024-02-17T21:00","2024-02-17T22:00","2024-02-17T23:00","2024-02-18T00:00","2024-02-18T01:00","2024-02-18T02:00","2024-02-18T03:00","2024-02-18T04:00","2024-02-18T05:00","2024-02-18T06:00","2024-02-18T07:00","2024-02-18T08:00","2024-02-18T09:00","2024-02-18T10:00","2024-02-18T11:00","2024-02-18T12:00","2024-02-18T13:00","2024-02-18T14:00","2024-02-18T15:00","2024-02-18T16:00","2024-02-18T17:00","2024-02-18T18:00","2024-02-18T19:00","2024-02-18T20:00","2024-02-18T21:00","2024-02-18T22:00","2024-02-18T23:00"], temperature2M: [6.5,6.7,6.6,6.4,6.0,5.9,5.8,5.8,5.7,5.9,6.2,6.9,7.2,8.0,8.4,8.3,7.9,6.6,5.4,4.7,4.3,3.9,3.7,3.3,2.7,2.0,1.9,2.1,1.5,1.7,2.0,1.8,1.6,1.9,2.8,4.0,5.5,5.8,6.2,7.1,6.5,5.5,4.0,3.5,3.2,3.3,2.9,1.9,1.9,1.8,1.1,1.1,1.1,1.0,0.9,0.8,0.8,1.7,3.3,4.7,5.6,5.8,5.7,4.7,4.0,7.2,6.2,5.7,5.2,4.9,4.6,4.4,4.1,3.8,3.3,3.1,3.1,3.0,2.8,2.8,3.0,3.9,4.9,5.5,5.9,6.4,6.6,6.8,7.0,6.3,5.5,5.1,4.7,4.3,4.0,3.7,3.5,3.2,3.1,3.1,3.1,2.9,2.5,2.3,2.6,3.6,5.2,6.2,7.1,7.2,7.2,6.7,7.2,6.5,6.2,6.1,5.9,5.9,5.6,5.2,5.3,5.6,5.7,5.4,5.2,4.9,4.7,4.4,4.6,5.6,6.6,7.3,8.0,8.5,8.5,8.3,8.0,7.6,7.2,6.8,6.8,7.0,7.0,6.7,6.3,5.9,5.8,5.8,5.7,5.6,5.5,5.4,5.3,5.3,5.3,5.3,5.3,5.3,5.5,5.8,6.0,6.0,6.0,5.9,5.8,5.8,5.6,5.4], precipitationProbability: [98,97,98,99,100,100,100,100,74,49,23,16,10,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,3,2,1,0,1,2,3,3,3,3,3,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,6,7,9,10,11,12,13,14,15,16,18,21,23,23,23,23,22,20,19,22,26,29,28,27,26,22,17,13,15,17,19,17,15,13,12,11,10,10,10,10,10], weatherCode: [63,53,63,51,61,61,3,3,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,1,45,45,45,45,45,45,45,45,45,45,45,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,51,51,51,53,53,53,53,53,53,53,53,53,51,51,51,3,3,3,51,51,51,3,3,3,3]), dailyUnits: DailyUnits(time: "iso8601", weatherCode: "wmo code", temperature2MMax: "째C", temperature2MMin: "째C", precipitationProbabilityMax: "%"), daily: Daily(time: ["2024-02-12","2024-02-13","2024-02-14","2024-02-15","2024-02-16","2024-02-17","2024-02-18"], weatherCode: [63,45,3,3,3,51,53], temperature2MMax: [8.4,7.1,7.2,7.0,7.2,8.5,6.3], temperature2MMin: [3.3,1.5,0.8,2.8,2.3,4.4,5.3], precipitationProbabilityMax: [100,0,1,3,1,23,29]))
    }
    
    func formattedTimeForWeatherView(value: String) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm"
        if let date = formatter.date(from: value) {
            formatter.dateFormat = "HH:mm"
            return formatter.string(from: date)
        } else {
            return "Invalid Time"
        }
    }
    func formattedTimeForHourlyView(value: String) -> Int {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd'T'HH:mm"
        if let date = formatter.date(from: value) {
            formatter.dateFormat = "HH"
            return Int(formatter.string(from: date)) ?? 0
        } else {
            return 0
        }
    }
    
    func formattedTimeForDailyView(value: String) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        
        if let date = formatter.date(from: value) {
            formatter.dateFormat = "MM/dd"
            return formatter.string(from: date)
        } else {
            return "Invalid Time"
        }
    }
    func formattedProbabilityForDailyView(value: Int) -> Int {
        let number = value
        let result = (number / 10) * 10
        return result > 10 ? result : 0
    }
}
